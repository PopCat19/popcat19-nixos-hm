{ lib, pkgs, config, system, inputs, userConfig, ... }:
let
  # Default wallpaper to derive palette from
  wpDir = builtins.path { path = ../wallpaper; name = "wallpaper"; };
  defaultWallpaper = "${wpDir}/kasane_teto_utau_drawn_by_yananami_numata220.jpg";

  # Absolute template path in store for Matugen
  hyprTemplate = builtins.toString (./matugen_templates/hypr.conf);

  # Matugen config TOML content (kept minimal)
  matugenToml = ''
    [config]

    [templates.hypr]
    input_path = "${hyprTemplate}"
    output_path = "~/.config/hypr/colors.conf"
  '';

  matugenBin = "${pkgs.matugen}/bin/matugen";

  # CLI selections (align with nixpkgs' matugen CLI)
  mode = "dark";                # "light" | "dark" | "amoled"
  scheme = "scheme-tonal-spot"; # palette type
  jsonFmt = "strip";            # "rgb" | "rgba" | "hsl" | "hsla" | "hex" | "strip"
  contrast = "0.0";

  # The config file path under $HOME/.config (avoid relying on xdg.* options)
  matugenConfigRel = ".config/matugen/config.toml";
  matugenConfigAbs = "$HOME/${matugenConfigRel}";
in
{
  # Provide Matugen + jq for JSON processing
  home.packages = [ pkgs.matugen pkgs.jq ];

  # Write Matugen config under ~/.config
  home.file.${matugenConfigRel}.text = matugenToml;

  # Ensure Hypr config dir exists at activation time
  # (We mkdir -p in the activation script below)

  # Generate colors at activation time using JSON + jq to render Hypr variables
  home.activation.matugenGenerate = lib.hm.dag.entryAfter [ "writeBoundary" ] ''
    set -euo pipefail
    echo "[matugen] Generating Material You palette for Hypr colors..." >&2
    mkdir -p "$HOME/.config/hypr" "$HOME/.cache"
    WALL="${defaultWallpaper}"

    # Generate JSON palette
    JSON_OUT="$HOME/.cache/matugen-theme.json"
    if ! ${matugenBin} image \
      --config "${matugenConfigAbs}" \
      --mode "${mode}" \
      --type "${scheme}" \
      --json "${jsonFmt}" \
      --contrast "${contrast}" \
      --quiet \
      "$WALL" > "$JSON_OUT"; then
      echo "[matugen] Generation failed" >&2
      exit 1
    fi

    # Render Hypr colors.conf from JSON
    COLORS="$HOME/.config/hypr/colors.conf"
    jq -r '
      def hx($k): (.colors[$k] // "ffffff");
      "# Generated by Matugen (activation) from " + (."'${WALL}'" // "wallpaper") + " at " + (now | todate) + "\n" +
      "$primary         = 0xff" + hx("primary") + "\n" +
      "$onPrimary       = 0xff" + hx("on_primary") + "\n" +
      "$secondary       = 0xff" + hx("secondary") + "\n" +
      "$onSecondary     = 0xff" + hx("on_secondary") + "\n" +
      "$tertiary        = 0xff" + hx("tertiary") + "\n" +
      "$onTertiary      = 0xff" + hx("on_tertiary") + "\n" +
      "$background      = 0xff" + hx("background") + "\n" +
      "$onBackground    = 0xff" + hx("on_background") + "\n" +
      "$surface         = 0xff" + hx("surface") + "\n" +
      "$onSurface       = 0xff" + hx("on_surface") + "\n" +
      "$surfaceVariant  = 0xff" + hx("surface_variant") + "\n" +
      "$outline         = 0xff" + hx("outline") + "\n" +
      "$error           = 0xff" + hx("error") + "\n" +
      "$onError         = 0xff" + hx("on_error") + "\n" +
      "\n" +
      "# Compatibility aliases\n" +
      "$rose            = $primary\n" +
      "$muted           = $surfaceVariant\n" +
      "$text            = $onSurface\n" +
      "$base            = $background\n" +
      "$overlay         = $outline\n" +
      "$highlightLow    = $surface\n" +
      "$highlightMed    = $secondary\n" +
      "$highlightHigh   = $tertiary\n" +
      "$gold            = $tertiary\n" +
      "$pine            = $secondary\n" +
      "$foam            = $tertiary\n" +
      "$iris            = $primary
    ' "$JSON_OUT" > "$COLORS".tmp

    mv "$COLORS".tmp "$COLORS"
    echo "[matugen] Wrote $COLORS" >&2
  '';
}