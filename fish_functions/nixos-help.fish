# ~/nixos-config/fish_functions/nixos-help.fish
# Comprehensive help system for NixOS configuration management functions
# Provides unified documentation and command discovery

function nixos-help -d "📖 Comprehensive help for NixOS configuration management"
    set -l topic "$argv[1]"

    if test -z "$topic"
        _nixos_help_main
    else
        switch $topic
            case core basics foundation
                _nixos_help_core
            case config configuration edit editing
                _nixos_help_config
            case apply rebuild build
                _nixos_help_apply
            case flake flakes inputs
                _nixos_help_flake
            case git version control
                _nixos_help_git
            case pkg package packages
                _nixos_help_packages
            case workflow workflows convenience
                _nixos_help_workflows
            case utils utilities tools
                _nixos_help_utils
            case troubleshooting debug diagnostic
                _nixos_help_troubleshooting
            case examples demo tutorial
                _nixos_help_examples
            case '*'
                echo "❌ Unknown help topic: $topic"
                echo ""
                _nixos_help_topics
        end
    end
end

function _nixos_help_main
    echo "📖 NixOS Configuration Management Help System"
    echo "═══════════════════════════════════════════════════════════════════════════════"
    echo ""
    echo "🎯 OVERVIEW:"
    echo "  A streamlined toolkit for managing NixOS configurations with flakes,"
    echo "  git integration, and automated workflows."
    echo ""
    echo "🚀 QUICK START:"
    echo "  nixos-status          # Check system status"
    echo "  nixconf-edit          # Edit system configuration"
    echo "  nixos-apply-config    # Apply changes"
    echo "  nixos-git 'message'   # Commit and push"
    echo ""
    echo "📚 HELP TOPICS:"
    echo "  nixos-help core           # Core utilities and environment"
    echo "  nixos-help config         # Configuration file editing"
    echo "  nixos-help apply          # Applying configurations"
    echo "  nixos-help flake          # Flake management"
    echo "  nixos-help git            # Git integration"
    echo "  nixos-help packages       # Package management"
    echo "  nixos-help workflows      # Convenience workflows"
    echo "  nixos-help utils          # Utility functions"
    echo "  nixos-help troubleshooting # Problem solving"
    echo "  nixos-help examples       # Usage examples"
    echo "  nixos-help modules        # Module system documentation"
    echo ""
    echo "🔍 COMMAND DISCOVERY:"
    echo "  functions | grep nixos    # List all NixOS functions"
    echo "  nixos-help examples       # See common usage patterns"
    echo ""
    echo "⚙️  ENVIRONMENT SETUP:"
    echo "  Required variables:"
    echo "    export NIXOS_CONFIG_DIR=\"/path/to/nixos-config\""
    echo "    export NIXOS_FLAKE_HOSTNAME=\"your-hostname\""
    echo ""
    echo "💡 TIP: Use 'command --help' for specific function help"
end

function _nixos_help_core
    echo "🔧 Core Utilities and Environment"
    echo "═══════════════════════════════════════════════════════════════════════════════"
    echo ""
    echo "🏗️ FOUNDATION FUNCTIONS:"
    echo "  nixos_validate_env        # Validate environment variables"
    echo "  nixos_find_config         # Find primary configuration file"
    echo "  nixos_list_configs        # List all configuration files"
    echo "  nixos_test_config         # Test configuration validity"
    echo "  nixos_current_generation  # Get current system generation"
    echo "  nixos_show_summary        # Show system summary"
    echo ""
    echo "🔍 DIAGNOSTIC FUNCTIONS:"
    echo "  nixos-status              # Show comprehensive system status"
    echo "  nixos-info                # Detailed system information"
    echo "  nixos-doctor              # Diagnose configuration issues"
    echo ""
    echo "🧹 MAINTENANCE FUNCTIONS:"
    echo "  nixos-cleanup             # Clean temporary files and old generations"
    echo "  nixos-backup              # Backup current configuration"
    echo "  nixos-restore             # Restore from backup"
    echo ""
    echo "📂 REQUIRED ENVIRONMENT:"
    echo "  NIXOS_CONFIG_DIR          # Path to NixOS configuration directory"
    echo "  NIXOS_FLAKE_HOSTNAME      # Hostname for flake configuration"
    echo ""
    echo "💡 These functions provide the foundation for all other NixOS tools."
end

function _nixos_help_config
    echo "📝 Configuration File Management"
    echo "═══════════════════════════════════════════════════════════════════════════════"
    echo ""
    echo "✏️ EDITING FUNCTIONS:"
    echo "  nixconf-edit              # Edit configuration.nix"
    echo "  homeconf-edit             # Edit home.nix"
    echo "  flake-edit                # Edit flake.nix"
    echo "  nixconf-list              # List available config files"
    echo ""
    echo "📁 FILE DISCOVERY:"
    echo "  Primary config priority order:"
    echo "    1. home-packages.nix    # Specialized package configuration"
    echo "    2. home-*.nix           # Other home manager files"
    echo "    3. home.nix             # Main home manager configuration"
    echo "    4. configuration.nix    # System configuration"
    echo ""
    echo "💡 USAGE PATTERNS:"
    echo "  nixconf-edit              # Quick system config edit"
    echo "  homeconf-edit             # Quick home config edit"
    echo "  flake-edit                # Quick flake edit"
    echo ""
    echo "🔗 INTEGRATION:"
    echo "  • All editing functions validate environment first"
    echo "  • Use \$EDITOR environment variable"
    echo "  • Support additional editor arguments"
    echo "  • Provide helpful error messages"
    echo ""
    echo "📖 Use 'command --help' for specific function documentation."
end

function _nixos_help_apply
    echo "🚀 Configuration Application"
    echo "═══════════════════════════════════════════════════════════════════════════════"
    echo ""
    echo "🎯 PRIMARY FUNCTION:"
    echo "  nixos-apply-config        # Complete configuration application workflow"
    echo ""
    echo "⚙️ OPTIONS:"
    echo "  -d, --dry-run             # Test configuration without applying"
    echo "  -m, --message MSG         # Commit with message and apply"
    echo "  -c, --commit              # Auto-commit (prompts for message)"
    echo ""
    echo "🔄 WORKFLOW:"
    echo "  1. Validate environment"
    echo "  2. Test configuration (if --dry-run)"
    echo "  3. Commit changes (if -m or -c)"
    echo "  4. Rebuild system with nixos-rebuild switch"
    echo "  5. Push to remote (if committed)"
    echo ""
    echo "💡 USAGE EXAMPLES:"
    echo "  nixos-apply-config                      # Just rebuild"
    echo "  nixos-apply-config -d                   # Test configuration"
    echo "  nixos-apply-config -m 'Add new tools'   # Commit and rebuild"
    echo "  nixos-apply-config -d -m 'Test config'  # Test then apply"
    echo ""
    echo "🛠️ LOW-LEVEL ALTERNATIVES:"
    echo "  nixos-rebuild-switch      # Direct nixos-rebuild interface"
    echo "  nixos_test_config         # Just test configuration"
    echo "  nixos_rebuild             # Core rebuild function"
    echo ""
    echo "🔍 DEBUGGING:"
    echo "  • Use -d flag to test changes first"
    echo "  • Check nixos-doctor for configuration issues"
    echo "  • Review nixos-status for system state"
end

function _nixos_help_flake
    echo "📦 Flake Management"
    echo "═══════════════════════════════════════════════════════════════════════════════"
    echo ""
    echo "🔄 UPDATE FUNCTIONS:"
    echo "  flake-update              # Update flake inputs with backup"
    echo "  flake-rollback            # Rollback to backup"
    echo "  flake-lock-clean          # Clean backup files"
    echo ""
    echo "📝 EDITING:"
    echo "  flake-edit                # Edit flake.nix"
    echo ""
    echo "⚙️ UPDATE OPTIONS:"
    echo "  flake-update                          # Update all inputs"
    echo "  flake-update nixpkgs                  # Update specific input"
    echo "  flake-update nixpkgs home-manager     # Update multiple inputs"
    echo "  flake-update --recreate-lock-file     # Recreate entire lock file"
    echo ""
    echo "🔄 UPDATE WORKFLOW:"
    echo "  1. Backup current flake.lock"
    echo "  2. Update specified inputs (or all)"
    echo "  3. Show changes made"
    echo "  4. Restore backup on failure"
    echo ""
    echo "💡 SAFETY FEATURES:"
    echo "  • Automatic backup of flake.lock"
    echo "  • Restoration on failure"
    echo "  • Change visualization"
    echo "  • Validation before proceeding"
    echo ""
    echo "🔧 RECOVERY:"
    echo "  flake-rollback            # Restore from automatic backup"
    echo "  git checkout flake.lock   # Restore from git (if tracked)"
    echo ""
    echo "⚠️ BEST PRACTICES:"
    echo "  • Always test updates with nixos-apply-config -d"
    echo "  • Update regularly but test thoroughly"
    echo "  • Keep backups until testing is complete"
    echo "  • Consider selective updates for production systems"
end

function _nixos_help_git
    echo "📝 Git Integration"
    echo "═══════════════════════════════════════════════════════════════════════════════"
    echo ""
    echo "🎯 PRIMARY FUNCTION:"
    echo "  nixos-git                 # Git operations for NixOS config"
    echo ""
    echo "⚙️ OPERATION MODES:"
    echo "  nixos-git 'commit msg'    # Commit and push (default mode)"
    echo "  nixos-git commit 'msg'    # Explicit commit and push"
    echo "  nixos-git push            # Push without committing"
    echo "  nixos-git pull [opts]     # Pull from remote"
    echo "  nixos-git status          # Show git status"
    echo "  nixos-git sync            # Pull then push"
    echo ""
    echo "🔄 WORKFLOW:"
    echo "  1. Validate git repository"
    echo "  2. Change to config directory"
    echo "  3. Execute git operation"
    echo "  4. Report results"
    echo ""
    echo "💡 USAGE EXAMPLES:"
    echo "  nixos-git 'Add new packages'         # Quick commit"
    echo "  nixos-git commit 'Fix config'        # Explicit commit"
    echo "  nixos-git pull --rebase              # Pull with rebase"
    echo "  nixos-git status                     # Check status"
    echo "  nixos-git sync                       # Sync with remote"
    echo ""
    echo "🔧 CORE GIT FUNCTIONS:"
    echo "  nixos_git_check           # Validate git repository"
    echo "  nixos_git_status          # Show status"
    echo "  nixos_git_commit          # Commit with message"
    echo "  nixos_git_push            # Push to remote"
    echo "  nixos_git_pull            # Pull from remote"
    echo ""
    echo "🔗 INTEGRATION:"
    echo "  • Automatically used by nixos-apply-config -m"
    echo "  • Validates repository before operations"
    echo "  • Handles remote repository gracefully"
    echo "  • Provides clear success/failure feedback"
end

function _nixos_help_packages
    echo "📦 Package Management"
    echo "═══════════════════════════════════════════════════════════════════════════════"
    echo ""
    echo "🎯 PRIMARY FUNCTION:"
    echo "  nixpkg                    # Simple package management interface"
    echo ""
    echo "⚙️ ACTIONS:"
    echo "  nixpkg add <pkg>          # Add package to configuration"
    echo "  nixpkg remove <pkg>       # Remove package from configuration"
    echo "  nixpkg list [filter]      # List packages in configuration"
    echo "  nixpkg search <query>     # Search nixpkgs"
    echo "  nixpkg show <pkg>         # Show package information"
    echo ""
    echo "🚀 OPTIONS:"
    echo "  -m, --message MSG         # Commit message (triggers rebuild)"
    echo "  -d, --dry-run             # Test configuration before applying"
    echo ""
    echo "💡 USAGE EXAMPLES:"
    echo "  nixpkg add firefox                    # Add package"
    echo "  nixpkg add htop -m 'Add system mon'   # Add and rebuild"
    echo "  nixpkg remove vim -d                  # Remove with test"
    echo "  nixpkg list editor                    # List editor packages"
    echo "  nixpkg search browser                 # Search for browsers"
    echo "  nixpkg show firefox                   # Package details"
    echo ""
    echo "📁 SUPPORTED CONFIGURATIONS:"
    echo "  • home.packages (Home Manager)"
    echo "  • environment.systemPackages (System)"
    echo "  • Both 'with pkgs;' and 'pkgs.' syntax"
    echo "  • Automatic configuration file detection"
    echo ""
    echo "🔄 WORKFLOW:"
    echo "  1. Find primary configuration file"
    echo "  2. Add/remove package entry"
    echo "  3. Test configuration (if -d)"
    echo "  4. Apply changes (if -m)"
    echo ""
    echo "⚠️ LIMITATIONS:"
    echo "  • Works with simple package lists"
    echo "  • Complex package configurations need manual editing"
    echo "  • Always validates changes before applying"
end

function _nixos_help_workflows
    echo "🔄 Convenience Workflows"
    echo "═══════════════════════════════════════════════════════════════════════════════"
    echo ""
    echo "📝 EDIT-AND-REBUILD WORKFLOWS:"
    echo "  nixos-edit-rebuild        # Edit configuration.nix then rebuild"
    echo "  home-edit-rebuild         # Edit home.nix then rebuild"
    echo ""
    echo "🔄 SYSTEM MAINTENANCE:"
    echo "  nixos-upgrade             # Update flake inputs then rebuild"
    echo "  nixos-quick-commit        # Quick rebuild and commit"
    echo "  nixos-rollback            # Rollback to previous generation"
    echo ""
    echo "📊 STATUS AND INFORMATION:"
    echo "  nixos-status              # Comprehensive system status"
    echo ""
    echo "💡 WORKFLOW PATTERNS:"
    echo ""
    echo "  📝 CONFIGURATION EDITING:"
    echo "    nixos-edit-rebuild                    # Edit system config"
    echo "    nixos-edit-rebuild -m 'Add services' # Edit and commit"
    echo "    home-edit-rebuild                     # Edit home config"
    echo ""
    echo "  🔄 SYSTEM UPDATES:"
    echo "    nixos-upgrade                         # Monthly updates"
    echo "    nixos-upgrade -m 'Monthly update'     # Update with commit"
    echo "    nixos-upgrade nixpkgs                 # Update specific input"
    echo ""
    echo "  🚀 QUICK OPERATIONS:"
    echo "    nixos-quick-commit 'Fix audio'       # Test, rebuild, commit"
    echo "    nixos-rollback                       # Undo last changes"
    echo "    nixos-rollback --commit              # Rollback and commit"
    echo ""
    echo "🔗 INTEGRATION:"
    echo "  • All workflows use the core utilities"
    echo "  • Support same options as underlying functions"
    echo "  • Provide streamlined user experience"
    echo "  • Include proper error handling and validation"
end

function _nixos_help_utils
    echo "🛠️ Utility Functions"
    echo "═══════════════════════════════════════════════════════════════════════════════"
    echo ""
    echo "📊 SYSTEM INFORMATION:"
    echo "  nixos-info                # Detailed system information"
    echo "  nixos-status              # Quick system status"
    echo "  nixos_show_summary        # Basic system summary"
    echo ""
    echo "🔧 DIAGNOSTICS:"
    echo "  nixos-doctor              # Comprehensive system diagnostics"
    echo "  nixos_validate_env        # Validate environment variables"
    echo "  nixos_test_config         # Test configuration validity"
    echo ""
    echo "🧹 MAINTENANCE:"
    echo "  nixos-cleanup             # Clean temporary files and old generations"
    echo "  nixos-backup              # Backup current configuration"
    echo "  nixos-restore             # Restore from backup"
    echo ""
    echo "📁 FILE MANAGEMENT:"
    echo "  nixos_find_config         # Find primary configuration file"
    echo "  nixos_list_configs        # List all configuration files"
    echo "  nixos_backup_lock         # Backup flake.lock"
    echo "  nixos_restore_lock        # Restore flake.lock from backup"
    echo ""
    echo "📈 GENERATION MANAGEMENT:"
    echo "  nixos_current_generation  # Get current generation number"
    echo "  nixos-rollback            # Rollback to previous generation"
    echo ""
    echo "💡 USAGE PATTERNS:"
    echo "  nixos-doctor              # First step in troubleshooting"
    echo "  nixos-info                # Detailed system analysis"
    echo "  nixos-cleanup             # Regular maintenance"
    echo "  nixos-backup              # Before major changes"
    echo ""
    echo "🔗 These utilities support the main workflow functions and provide"
    echo "   detailed system introspection and maintenance capabilities."
end

function _nixos_help_troubleshooting
    echo "🔧 Troubleshooting Guide"
    echo "═══════════════════════════════════════════════════════════════════════════════"
    echo ""
    echo "🚨 FIRST STEPS:"
    echo "  1. nixos-doctor           # Run diagnostics"
    echo "  2. nixos-status           # Check system status"
    echo "  3. nixos-info             # Get detailed information"
    echo ""
    echo "❌ COMMON ISSUES:"
    echo ""
    echo "  🔴 Environment Variables Missing:"
    echo "    Problem: ❌ Missing required environment variables"
    echo "    Solution: Set NIXOS_CONFIG_DIR and NIXOS_FLAKE_HOSTNAME"
    echo "    Commands: export NIXOS_CONFIG_DIR=\"/path/to/config\""
    echo "             export NIXOS_FLAKE_HOSTNAME=\"hostname\""
    echo ""
    echo "  🔴 Configuration Test Failures:"
    echo "    Problem: ❌ Configuration test failed"
    echo "    Solution: Check syntax and fix errors"
    echo "    Commands: nixos-apply-config -d"
    echo "             nixos-rebuild dry-run --show-trace"
    echo ""
    echo "  🔴 Git Repository Issues:"
    echo "    Problem: ⚠️ Not a git repository"
    echo "    Solution: Initialize git repository"
    echo "    Commands: cd \$NIXOS_CONFIG_DIR"
    echo "             git init"
    echo "             git remote add origin <repo-url>"
    echo ""
    echo "  🔴 Flake Update Failures:"
    echo "    Problem: ❌ Flake update failed"
    echo "    Solution: Rollback and try selective update"
    echo "    Commands: flake-rollback"
    echo "             flake-update nixpkgs"
    echo ""
    echo "  🔴 Build Failures After Update:"
    echo "    Problem: ❌ System won't build after flake update"
    echo "    Solution: Rollback flake and try selective updates"
    echo "    Commands: flake-rollback"
    echo "             nixos-apply-config -d"
    echo "             flake-update --recreate-lock-file"
    echo ""
    echo "🔄 RECOVERY PROCEDURES:"
    echo ""
    echo "  📦 Rollback System:"
    echo "    nixos-rollback            # Rollback to previous generation"
    echo "    sudo nixos-rebuild switch --rollback"
    echo ""
    echo "  📁 Restore Configuration:"
    echo "    nixos-restore             # Restore from backup"
    echo "    git checkout HEAD~1       # Git rollback"
    echo ""
    echo "  🔄 Reset Flake:"
    echo "    flake-rollback            # Restore flake.lock"
    echo "    git checkout flake.lock   # Git restore"
    echo ""
    echo "🔍 DEBUGGING COMMANDS:"
    echo "  nixos-rebuild dry-run --show-trace    # Detailed error info"
    echo "  nixos-rebuild switch --show-trace     # Trace build issues"
    echo "  nix flake check                       # Validate flake"
    echo "  git status                            # Check git state"
    echo ""
    echo "💡 PREVENTION:"
    echo "  • Always use nixos-apply-config -d to test first"
    echo "  • Run nixos-doctor regularly"
    echo "  • Keep backups with nixos-backup"
    echo "  • Test flake updates before committing"
    echo "  • Use git to track all changes"
end

function _nixos_help_examples
    echo "💡 Usage Examples and Common Workflows"
    echo "═══════════════════════════════════════════════════════════════════════════════"
    echo ""
    echo "🚀 DAILY WORKFLOWS:"
    echo ""
    echo "  📝 Quick Configuration Change:"
    echo "    nixconf-edit                          # Edit system config"
    echo "    nixos-apply-config -d                 # Test changes"
    echo "    nixos-apply-config -m 'Add new tool' # Apply and commit"
    echo ""
    echo "  📦 Add/Remove Packages:"
    echo "    nixpkg add firefox -m 'Add browser'   # Add package and rebuild"
    echo "    nixpkg remove vim -d                  # Remove package with test"
    echo "    nixpkg list editor                    # List editor packages"
    echo ""
    echo "  🏠 Home Manager Changes:"
    echo "    home-edit-rebuild -m 'Update dotfiles' # Edit home config and rebuild"
    echo ""
    echo "🔄 MAINTENANCE WORKFLOWS:"
    echo ""
    echo "  📅 Monthly System Update:"
    echo "    nixos-backup                          # Backup current config"
    echo "    flake-update                          # Update all inputs"
    echo "    nixos-apply-config -d                 # Test new configuration"
    echo "    nixos-apply-config -m 'Monthly update' # Apply if successful"
    echo ""
    echo "  🧹 System Cleanup:"
    echo "    nixos-cleanup                         # Clean old files"
    echo "    sudo nix-collect-garbage -d           # Clean old generations"
    echo "    sudo nix-store --optimise             # Optimize nix store"
    echo ""
    echo "🔧 DEVELOPMENT WORKFLOWS:"
    echo ""
    echo "  🆕 New System Setup:"
    echo "    export NIXOS_CONFIG_DIR=\"/etc/nixos\""
    echo "    export NIXOS_FLAKE_HOSTNAME=\"myhost\""
    echo "    cd \$NIXOS_CONFIG_DIR"
    echo "    git init && git remote add origin <repo>"
    echo "    nixos-doctor                          # Validate setup"
    echo ""
    echo "  🔬 Experimental Changes:"
    echo "    nixos-backup                          # Create backup first"
    echo "    nixconf-edit                          # Make changes"
    echo "    nixos-apply-config -d                 # Test thoroughly"
    echo "    nixos-apply-config -m 'Experiment'    # Apply if working"
    echo "    # If problems: nixos-rollback"
    echo ""
    echo "🚨 TROUBLESHOOTING WORKFLOWS:"
    echo ""
    echo "  ❌ System Won't Boot:"
    echo "    # At boot menu, select previous generation"
    echo "    nixos-status                          # Check what changed"
    echo "    nixos-restore                         # Restore from backup"
    echo ""
    echo "  ❌ Configuration Errors:"
    echo "    nixos-doctor                          # Run diagnostics"
    echo "    nixos-apply-config -d                 # Test current config"
    echo "    git log --oneline                     # Check recent changes"
    echo "    git checkout HEAD~1 configuration.nix # Revert config"
    echo ""
    echo "  ❌ Flake Update Broke System:"
    echo "    flake-rollback                        # Restore flake.lock"
    echo "    nixos-apply-config -d                 # Test restored config"
    echo "    flake-update nixpkgs                  # Try selective update"
    echo ""
    echo "🔗 COLLABORATION WORKFLOWS:"
    echo ""
    echo "  📥 Pull Changes from Team:"
    echo "    nixos-git pull                        # Get latest changes"
    echo "    nixos-apply-config -d                 # Test pulled changes"
    echo "    nixos-apply-config                    # Apply if good"
    echo ""
    echo "  📤 Share Configuration:"
    echo "    nixos-apply-config -d                 # Test local changes"
    echo "    nixos-git 'Add new development tools' # Commit and push"
    echo ""
    echo "💡 PRO TIPS:"
    echo "  • Always test with -d flag before applying"
    echo "  • Use descriptive commit messages"
    echo "  • Run nixos-doctor regularly"
    echo "  • Keep system backups before major changes"
    echo "  • Use nixos-status to understand current state"
end

function _nixos_help_modules
    echo "🏗️ Module System Documentation"
    echo "═══════════════════════════════════════════════════════════════════════════════"
    echo ""
    echo "📦 MODULAR ARCHITECTURE:"
    echo "  The NixOS configuration management system is now organized into"
    echo "  specialized modules for better maintainability and clarity."
    echo ""
    echo "🔧 CORE MODULES:"
    echo "  nixos-env-core.fish       # Environment validation and config discovery"
    echo "  nixos-system-core.fish    # System operations (rebuild, test)"
    echo "  nixos-utils-core.fish     # Utility functions (info, cleanup, backup)"
    echo "  nixos-git-core.fish       # Git operations and repository management"
    echo ""
    echo "📁 MODULE LOCATIONS:"
    echo "  All modules are located in: ~/nixos-config/fish_functions/"
    echo ""
    echo "🔗 DEPENDENCY STRUCTURE:"
    echo "  • nixos-env-core.fish: Base module - no dependencies"
    echo "  • nixos-system-core.fish: Depends on nixos-env-core.fish"
    echo "  • nixos-utils-core.fish: Depends on nixos-env-core.fish"
    echo "  • nixos-git-core.fish: Depends on nixos-env-core.fish"
    echo ""
    echo "⚠️ DEPRECATION NOTICE:"
    echo "  nixos-core.fish is deprecated and will be removed in a future version."
    echo "  All functionality has been moved to the specialized modules above."
    echo ""
    echo "💡 MIGRATION GUIDE:"
    echo "  Instead of sourcing nixos-core.fish, source the specific modules:"
    echo "    source nixos-env-core.fish    # For environment functions"
    echo "    source nixos-system-core.fish # For system operations"
    echo "    source nixos-utils-core.fish  # For utility functions"
    echo "    source nixos-git-core.fish    # For git operations"
    echo ""
    echo "🎯 FUNCTION MAPPING:"
    echo "  Old Location → New Location:"
    echo "    nixos_validate_env    → nixos-env-core.fish"
    echo "    nixos_find_config     → nixos-env-core.fish"
    echo "    nixos_list_configs    → nixos-env-core.fish"
    echo "    nixos_test_config     → nixos-system-core.fish"
    echo "    nixos_rebuild         → nixos-system-core.fish"
    echo "    nixos_show_summary    → nixos-utils-core.fish"
    echo "    nixos_git_check       → nixos-git-core.fish"
    echo ""
    echo "✅ BENEFITS:"
    echo "  • Clearer separation of concerns"
    echo "  • Reduced dependency complexity"
    echo "  • Easier maintenance and testing"
    echo "  • Better performance (only load needed modules)"
    echo "  • Improved error handling and validation"
end

function _nixos_help_topics
    echo "📚 Available Help Topics:"
    echo ""
    echo "  core              Core utilities and environment"
    echo "  config            Configuration file management"
    echo "  apply             Configuration application"
    echo "  flake             Flake management"
    echo "  git               Git integration"
    echo "  packages          Package management"
    echo "  workflows         Convenience workflows"
    echo "  utils             Utility functions"
    echo "  troubleshooting   Problem solving"
    echo "  examples          Usage examples"
    echo "  modules           Module system documentation"
    echo ""
    echo "Usage: nixos-help <topic>"
end
